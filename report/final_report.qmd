---
title: "Workload Model"
subtitle: "A summary of the workload model created for this organization"
title-block-banner: true
title-block-style: plain
format:
  html:
    toc: true
    toc-location: left
    toc-title: Contents
    css: styles.css
    code-fold: true
    output-file: 'index'
---

## Introduction

This report provides a summary view of data related to workers, tasks, and hours.

## Setup

### Environment



```{r setup}
#| message: false
here::i_am("final_report.qmd")
library(here)
library(ggplot2)
library(dplyr)
library(ztable)

cfg <- config::get()

ggplot2::theme_set(theme_bw())

mbcol <- "#1D5F97"

# TODO
# - add color pallette that aligns to malbay
# - add a label to work items graph to show what each mark means
# - figure out why rendering looks a little blurry
# - 90 degree angle of header row on heatmap or some other solution
# - Improve heatmap by
    # - making text smaller?
    # - Add tool tips with totals for columns and rows?
    # - 
# - After I get feedback on each view, start adding in data validation checks
# Can I adjust the scroll to scroll and not jump







```

### Reading in Data

The first data set is organized by item and role. 
It includes information about each of these combinations and a quick summary is 
provided below.

```{r}

main_dat <- readr::read_csv(here(cfg$datapath, cfg$main), 
                            show_col_types = FALSE)

glimpse(main_dat)

```

The second data set organizes cases by work items. 
It is meant to represent the full list of work items and the expected number 
of hours that will be required to complete each.
This data will be compared to the first data set throughout.
An example of the output is printed below.

```{r}

workitems_dat <- readr::read_csv(here(cfg$datapath, cfg$workitems),
                                 show_col_types = FALSE)

glimpse(workitems_dat)

```

Although not included, there is probably at least one more data set.

1. A list of workers and relevant information on each

TODO: Create example list of workers

## Preparing Data

This section outlines some data validation checks and a series of adjustments 
that are made to the input data based on global parameters. 

### Validating Data

TODO: Work on this section as we confirm what the inputs will look like.

Output from confirming data (probably a table)

- Number rows
- Total hours
- Total roles
- Total tasks
- Sum of planned hours should meet total number of fours after accounting for admin
- Sum of planned hours for each ind should meet expected supply, highlight above or below
- All individuals or roles should be included in the data set 
(placeholder inds can exist for planning)
- Sum of planned hours **within each period (week, month, year, etc.)** should
meet total number of hours after accounting for admin
- Sum of planned hours for **each individual or role within each period**
should meet total number of hours after accounting for administrative activities
- All tasks should be included, even if there is no alignment. 
The latter should be highlighted.
- Each ind's maximum and minimum dates should cover the full timeline. If they 
don't, the fact should be highlighted.

Other ideas?

### Adjusting Data

This section will outline any adjustments applied to the input data along with
a summary of any global parameters. 

Some of the potential ideas for this section includes:

- Overall timeline
- Standard work day/week/year
- Percent of worker's time that should be reserved for admin activities
- Total hours available after accounting for admin activities through the timeline
- Full list of workers/roles included in exercise
- Current quality level vs. optimal quality level

TODO: Provide example of an adjustable parameter based on discussion with team

## Views

### Hours by work item

The first view provides the hours by work item. 

```{r}

# prepare data
hours_by_item <- main_dat %>% 
  group_by(item) %>% 
  summarize(hours = sum(exp_hours)) %>% 
  full_join(workitems_dat, by = join_by(item)) %>% 
  mutate(item = forcats::fct_infreq(item, w = hours_required)) %>% 
  tidyr::replace_na(list(hours = 0))

xlab <- unique(main_dat$period)
stopifnot("period must be on the same time frame" = length(xlab) == 1)
  
  
# Create graph
hours_by_item %>% 
  ggplot(aes(y = forcats::fct_rev(item))) +
  geom_col(aes(x = hours),
           fill = mbcol) +
  geom_point(aes(x = hours_required)) +
  labs(title = "Hours by work item",
       y = "Work item", 
       x = paste0("Hours per ", xlab))

part1 <- hours_by_item %>% 
  mutate(over_under_pct = hours / hours_required-1) %>% 
  select(item, hours) %>% 
  ggplot(aes(y = forcats::fct_rev(item))) +
  geom_col(aes(x = hours),
           fill = mbcol) +
  labs(title = "Hours by work item",
     y = "Work item", 
     x = paste0("Hours per ", xlab))

  
part2 <- hours_by_item %>% 
  mutate(over_under_pct = hours / hours_required-1) %>% 
  select(item, over_under_pct) %>% 
  ggplot(aes(y = forcats::fct_rev(item))) +
  geom_col(aes(x = over_under_pct),
           fill = mbcol) +
  scale_x_continuous(labels = scales::percent, limits = c(-1, 1),
                     breaks = c(-.75, 0, .75)) +
  labs(title = "% over/under",
     y = NULL, 
     x = "%")+
  theme(axis.text.y = element_blank())
  
library(patchwork)

part1 + part2 + plot_layout(widths = c(3, 1))

```


### Hours by individual and work item

This section shows the expect time for each task grouped by individuals or roles.

```{r}
#| fig-width: 13.5
#| fig-height: 6.6
#| column: screen-inset-right


# prepare data
hours_by_item_role <- main_dat %>%
  group_by(item, role) %>%
  summarize(hours = sum(exp_hours), .groups = "drop") %>%  
  # full_join(workitems_dat) %>%
  mutate(item = forcats::fct_infreq(item, w = hours)) #%>%
  # tidyr::replace_na(list(hours = 0))

xlab <- unique(main_dat$period)
stopifnot("period must be on the same time frame" = length(xlab) == 1)
  
  
# Create graph
hours_by_item_role %>% 
  ggplot() +
  geom_col(aes(x = hours, y = forcats::fct_rev(item)), 
           position = "dodge", fill = mbcol) +
  facet_wrap(.~role, scale = "free_y", nrow = 3) +
  labs(title = "Hours by work item",
       y = "Work item", 
       x = paste0("Hours per ", xlab))



```

### Gantt Chart

This view provides the time expected on each task throughout the time period.

```{r}
#| fig-width: 14.6
#| fig-height: 7
#| column: screen-inset-right 
main_dat %>% 
  # filter(role == "manager") %>% 
  ggplot(aes(x=lubridate::ymd(start_dt), xend=lubridate::ymd(end_dt), y=item, yend=item)) +
  # theme_bw()+ #use ggplot theme with black gridlines and white background
  geom_segment(linewidth=3,
               color = mbcol) + #increase line width of segments in the chart
  facet_wrap(.~role, scales = "free_y") +
  labs(title='Schedule', x='Time', y='Work Item')

```

### Heatmap

Finally, this view highlights where time is being spent by the team and 
where there are potential gaps.

#### Prep data

```{r}

hm_dat <- main_dat %>% 
  select(item, exp_hours, role) %>% 
  tidyr::pivot_wider(names_from = role, 
                     values_from = exp_hours) %>% 
  as.data.frame()

```


#### ztable--Version 1

I think this is the best looking version, 
but I haven't come up with a solution for the column headers.
At the moment, I'm thinking of simply numbering the columns and providing a key.

```{r}
#| output: 'asis'
#| column: screen-inset-right
# https://cran.r-project.org/web/packages/ztable/vignettes/heatmapTable.html
options(ztable.type = "html")

# create view
hm_dat %>% 
  ztable(rotate = TRUE, turn=TRUE, angle = 90) %>% 
  makeHeatmap(margin = 2) %>% 
  print(caption = 'How does this look?')

```

#### gt--Version 2

This one isn't bad, but the "NA"s are distracting. Same issue with column header.

```{r}
#| output: 'asis'
#| column: screen-inset-right
# https://stackoverflow.com/questions/65327289/
# how-to-represent-a-datatable-in-r-as-a-heatmap

# prep data
library(gt)
hm_dat %>% 
  gt() %>% 
  data_color(columns = manager:`theater ops specialist 3`, 
             direction = "column",
             na_color = "white", 
             palette = "Oranges")
```

#### flextable--Version 3

This one has an option to angle the column headers, 
but it obviously isn't working as expected...

```{r}
#| output: 'asis'
#| column: screen-inset-right
# https://www.ardata.fr/en/flextable-gallery/2021-03-29-gradient-colored-table/

# prep data'
library(knitr)
library(kableExtra)
ktab <- main_dat %>% 
  select(item, exp_hours, role) %>% 
  tidyr::pivot_wider(names_from = role, 
                     values_from = exp_hours) %>% 
  as.data.frame() %>% 
  kable(format = 'html')



ktab %>% 
  kable_paper("striped", full_width = F) %>%
  row_spec(0, angle = -90) %>% 
  row_spec(0, align = "r")
  
```




## Other ideas

- A view that highlights unfulfilled hours or work items

## Questions that need to be answered in report
- How many people would it take to do 100% of the required work?
- How do things change as the quality of work changes (increases or decreases)?
