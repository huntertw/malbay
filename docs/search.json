[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workload Model",
    "section": "",
    "text": "This report provides a summary view of data related to workers, tasks, and hours.\nThis report has been customized for American Rivers."
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "Workload Model",
    "section": "Setup",
    "text": "Setup\n\nEnvironment\n\n\nCode\nhere::i_am(\"final_report.qmd\")\nlibrary(here)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(reactable)\nlibrary(reactablefmtr)\nlibrary(tippy)\nlibrary(ggh4x)\nlibrary(patchwork)\n\n\ncfg <- config::get()\n\nggplot2::theme_set(theme_bw())\n\nmbcol <- \"#1D5F97\"\nmy_pallette <- pals::kelly()[-1]\n\n# TODO\n# - add color pallette that aligns to malbay\n# - add a label to work items graph to show what each mark means\n# - figure out why rendering looks a little blurry\n# - 90 degree angle of header row on heatmap or some other solution\n# - Improve heatmap by\n    # - making text smaller?\n    # - Add tool tips with totals for columns and rows?\n    # - \n# - After I get feedback on each view, start adding in data validation checks\n# Can I adjust the scroll to scroll and not jump\n\n\n\n\n# Random info: if prompted for gf pat, use the following two commands, I think\n# gitcreds::gitcreds_set() # try just this... does it still ask?\n# credentials::set_github_pat()\n\n\n\n\nReading in Data\nThere is only a single data set used for this report. It is organized by Task and Position. It provides information about each of these combinations and a quick summary is provided below.\n\n\nCode\nmain_dat <- readxl::read_xlsx(here(cfg$datapath, cfg$client_main)) %>% \n  setNames(make.names(names(.)))\n\nglimpse(main_dat)\n\n\nRows: 86\nColumns: 8\n$ Task.No              <dbl> 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,…\n$ Current.Position     <chr> \"Assoc Director of Contracts and HR\", \"Assoc Dire…\n$ Task                 <chr> \"Contract Creation (Funding ag)\", \"Contract Creat…\n$ Description          <chr> \"(Money into American Rivers). Contract request i…\n$ Department.Alignment <chr> \"Contracts\", \"Contracts\", \"Contracts\", \"Contracts…\n$ Reps.Per.Week        <dbl> 3.00, 4.00, 4.00, 4.00, 13.00, 6.00, 1.00, 3.00, …\n$ Avg.Minutes          <dbl> 90, 30, 60, 90, 10, 30, 60, 30, 480, 20, 60, 20, …\n$ Total.Mins.Max       <dbl> 270, 120, 240, 360, 130, 180, 60, 90, 240, 200, 6…\n\n\n\n\n\n\n\n\nNote\n\n\n\nA second data set could organize cases by tasks, with an estimate of how long each task should take. This data could be compared to the first data set throughout.\nA third data set could provide a similar set of information, but summed at the role level. Again, this data could be compared to the first data set throughout.\n\n\n\n\nCode\n# # workitems_dat <- readr::read_csv(here(cfg$datapath, cfg$workitems),\n# #                                  show_col_types = FALSE)\n# \n# workitems_dat <- main_dat %>% \n#   select(Task, Total.Mins.Max, Department.Alignment) %>% \n#   group_by(Task, Department.Alignment) %>% \n#   summarize(Mins.Required = sum(Total.Mins.Max),\n#             instances = n())\n# \n# glimpse(workitems_dat)\n\n\n\n\nCode\n# workitems_dat <- readr::read_csv(here(cfg$datapath, cfg$workitems),\n#                                  show_col_types = FALSE)\n\n# role_dat <- main_dat %>% \n#   select(Current.Position, Total.Mins.Max) %>% \n#   group_by(Current.Position) %>% \n#   summarize(Total.Mins = sum(Total.Mins.Max),\n#             Number.Tasks = n())\n# \n# glimpse(role_dat)"
  },
  {
    "objectID": "index.html#preparing-data",
    "href": "index.html#preparing-data",
    "title": "Workload Model",
    "section": "Preparing Data",
    "text": "Preparing Data\nThis section outlines some data validation checks and a series of adjustments that are made to the input data based on global parameters.\n\nValidating Data\n\n\n\n\n\n\nImportant\n\n\n\nThis section is really meant for dealing with multiple data sets.\nAre there any data validation steps we would want to include for this iteration?\n\n\nOutput from confirming data (probably a table)\n\nNumber rows\nTotal hours\nTotal roles\nTotal tasks\nSum of planned hours should meet total number of fours after accounting for admin\nSum of planned hours for each ind should meet expected supply, highlight above or below\nAll individuals or roles should be included in the data set (placeholder inds can exist for planning)\nSum of planned hours within each period (week, month, year, etc.) should meet total number of hours after accounting for admin\nSum of planned hours for each individual or role within each period should meet total number of hours after accounting for administrative activities\nAll tasks should be included, even if there is no alignment. The latter should be highlighted.\nEach ind’s maximum and minimum dates should cover the full timeline. If they don’t, the fact should be highlighted.\n\nSome of the other generic ideas for this section could include:\n\nOverall timeline\nStandard work day/week/year\nPercent of worker’s time that should be reserved for admin activities\nTotal hours available after accounting for admin activities through the timeline\nFull list of workers/roles included in exercise\nCurrent quality level vs. optimal quality level\n\nOther ideas?\n\n\nAdjusting Data\nThis section will outline any adjustments applied to the input data along with a summary of any global parameters.\nA quick review of this data suggests a handful of adjustments. They include:\n\nAdjust to hours\nAdd period column to represent period\n\n\n\nCode\nmain_dat <-   main_dat %>% \n  mutate(Total.Hours = round(Total.Mins.Max / 60, 2),\n         period = \"week\")\n\n\n# Do I need this?\n# workitems_dat <- main_dat %>% \n#   select(Task, Total.Hours, Department.Alignment) %>% \n#   group_by(Task, Department.Alignment) %>% \n#   summarize(Hours.Required = sum(Total.Hours),\n#             Number.Tasks = n(),\n#             .groups = \"drop\")\n# role_dat <- main_dat %>% \n#   select(Current.Position, Total.Hours) %>% \n#   group_by(Current.Position) %>% \n#   summarize(Total.Hours = sum(Total.Hours),\n#             Number.Tasks = n(), .groups = \"drop\")\n\n\n\n\n\n\n\n\nImportant\n\n\n\nOTHER IDEAS TO DISCUSS WITH TEAM:\n\nGroup tasks?"
  },
  {
    "objectID": "index.html#views",
    "href": "index.html#views",
    "title": "Workload Model",
    "section": "Views",
    "text": "Views\n\nHours by Department Alignment\nThis first summary view provides the sum of hours by department alignment. The right side also provides a count of unique roles contributing to the department efforts.\n\n\nCode\n# prepare data\nhours_by_department <- main_dat %>% \n  group_by(Department.Alignment) %>% \n  summarize(Hours = sum(Total.Hours),\n            Num.Positions = length(unique(Current.Position))) %>% \n  mutate(Department.Alignment = forcats::fct_infreq(Department.Alignment, w = Hours))\n\nxlab <- unique(main_dat$period)\nstopifnot(\"period must be on the same time frame\" = length(xlab) == 1)\n\nleftside <- hours_by_department %>% \n  ggplot(aes(y = forcats::fct_rev(Department.Alignment))) +\n  geom_col(aes(x = Hours, fill = Department.Alignment)) +\n  labs(title = \"Hours by department\",\n     y = \"Task\", \n     x = paste0(\"Hours per \", xlab)) + \n  scale_fill_manual(values = my_pallette) +\n  theme(legend.position = \"none\")\n  # scale_fill_brewer(palette = \"Set3\")\n\nrightside <- hours_by_department %>% \n  ggplot(aes(y = forcats::fct_rev(Department.Alignment))) +\n  geom_col(aes(x = Num.Positions, fill = Department.Alignment)) +\n  labs(title = \"# Positions\",\n     y = NULL,\n     x = \"Positions\") +\n  scale_fill_manual(values = my_pallette) +\n  theme(legend.position = \"none\",\n        axis.text.y = element_blank())\n\nleftside + rightside + plot_layout(widths = c(3,1))\n\n\n\n\n\nThis second version provides a summary adjusted by the number of roles associated with each department.\n\n\n\n\n\n\nImportant\n\n\n\nI think I’m going to drop this after the adjustments I made to the graph above.\n\n\n\n\nCode\n# prepare data\nhours_by_department <- main_dat %>% \n  group_by(Department.Alignment) %>% \n  summarize(Hours = sum(Total.Hours),\n            num_pos = length(unique(Current.Position)),\n            hours_per_position = Hours / num_pos) %>% \n  mutate(Department.Alignment = forcats::fct_infreq(Department.Alignment, w = Hours))\n\nxlab <- unique(main_dat$period)\nstopifnot(\"period must be on the same time frame\" = length(xlab) == 1)\n\nhours_by_department %>% \n  ggplot(aes(y = forcats::fct_rev(Department.Alignment))) +\n  geom_col(aes(x = hours_per_position, fill = Department.Alignment)) +\n  labs(title = \"Hours by department divided by number unique roles\",\n     y = \"Task\", \n     x = paste0(\"Average hours per \", xlab)) + \n  scale_fill_manual(values = my_pallette) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nHours by Task and Department\nThe view provides the hours by task and department.\n\n\nCode\n# prepare data\nhours_by_item <- main_dat %>% \n  group_by(Task, Department.Alignment) %>% \n  summarize(Hours = sum(Total.Hours), .groups = \"drop\") %>% \n  arrange(desc(Hours)) %>% \n  mutate(Task = forcats::fct_inorder(Task)) \n\nxlab <- unique(main_dat$period)\nstopifnot(\"period must be on the same time frame\" = length(xlab) == 1)\n  \n  \n# # Create graph\n# hours_by_item %>% \n#   ggplot(aes(y = forcats::fct_rev(item))) +\n#   geom_col(aes(x = hours),\n#            fill = mbcol) +\n#   geom_point(aes(x = hours_required)) +\n#   labs(title = \"Hours by work item\",\n#        y = \"Work item\", \n#        x = paste0(\"Hours per \", xlab))\n\nhours_by_item %>%\n  # mutate(over_under_pct = Hours / Hours.Required-1) %>%\n  # select(Task, Hours, Department.Alignment) %>%\n  ggplot(aes(y = forcats::fct_rev(Task))) +\n  geom_col(aes(x = Hours, fill = Department.Alignment)) +\n  facet_grid(rows = vars(Department.Alignment), \n             scales = \"free_y\", space = \"free\", \n             labeller = label_wrap_gen(width = 20, multi_line = TRUE)) +\n  labs(title = \"Hours by task\",\n     y = \"Task\",\n     x = paste0(\"Hours per \", xlab)) +\n  scale_fill_manual(values = my_pallette) + \n  theme(legend.position = \"none\",\n        strip.text.y.right = element_text(angle=0))\n\n\n\n\n\n\n\nHours by Task, Position, and Department\nThe view provides the hours by task and department.\n\n\nCode\n# prepare data\nhours_by_item_role <- main_dat %>%\n  # full_join(workitems_dat %>% select(Task, Hours.Required), by = join_by(Task)) %>% \n  # filter(!is.na(Total.Hours)) %>% \n  group_by(Task, Current.Position, Department.Alignment) %>%\n  summarize(Hours = sum(Total.Hours), .groups = \"drop\") %>% \n  # full_join(workitems_dat) %>%\n  arrange(desc(Hours)) %>% \n  mutate(item = forcats::fct_inorder(Task)) \n\nxlab <- unique(main_dat$period)\nstopifnot(\"period must be on the same time frame\" = length(xlab) == 1)\n  \n  \n# Create graph\nhours_by_item_role %>% \n  ggplot() +\n  geom_col(aes(x = Hours, y = Task, fill = Department.Alignment), \n           position = \"dodge\") +\n  facet_nested(rows = vars(Current.Position, Department.Alignment),\n             space = \"free_y\", scale = \"free\",\n             labeller = label_wrap_gen(width = 20, multi_line = TRUE)) +\n  labs(title = \"Hours by Position and Task\",\n       y = \"Task\", \n       x = paste0(\"Hours per \", xlab)) +\n  theme(legend.position = \"none\",\n        strip.text.y.right = element_text(angle=0)) +\n  scale_fill_manual(values = my_pallette)\n\n\n\n\n\n\n\nHeatmap\nFinally, this view highlights where time is being spent by the team and where there are potential gaps.\n\n\nCode\n# https://glin.github.io/reactable/articles/examples.html#basic-usage\n\n# TODO: \n# Add some data that takes into account higher level work tasks / skills\nhm_dat <- main_dat %>% \n  # filter(Current.Position == \"Senior Accountant\") %>% \n  select(Task, Total.Hours, Current.Position) %>% \n  group_by(Task, Current.Position) %>% \n  summarize(Total.Hours = sum(Total.Hours), .groups = 'drop') %>% \n  tidyr::pivot_wider(names_from = Current.Position, \n                     values_from = Total.Hours) %>% \n  as.data.frame()\n\nhm_dat$`General Counsel`[1] <-  0 # need at least two items with a number\n\n \n\nwith_tooltip <- function(value, tooltip, ...) {\n  htmltools::div(style = \"text-decoration: underline; text-decoration-style: dotted; cursor: help\",\n      tippy(value, tooltip, ...))\n}\nlibrary(htmltools)\n\nreactable(hm_dat, \n          resizable = TRUE,\n          pagination = FALSE,\n          bordered = TRUE,\n          wrap = FALSE,\n                    # width = 2000,\n          style = list(fontSize = \"0.65rem\"),\n          defaultColDef = colDef(footer = function(values) sum(values, na.rm = T),\n                                 footerStyle = list(fontWeight = \"bold\"),\n                                 minWidth = 50,\n                                 style = color_scales(hm_dat, \n                                                      colors = RColorBrewer::brewer.pal(5, \"Oranges\"))),\n          columns = list(\n            Task = colDef(minWidth = 150, filterable = TRUE, \n                         sticky = \"left\", footer = \"Total\"),\n            # There must be a better way to do this...\n            # cat(paste0(\"`\", names(hm_dat),\n            #            \"` = colDef(header = with_tooltip('\",names(hm_dat),\n            #            \"','\",names(hm_dat),\"'))\"),\n            #     sep = \",\\n\")\n            # Maybe pass in a function to finish creating this table...?\n            `Task` = colDef(header = with_tooltip('Task','Task')),\n            `Junior Accountant` = colDef(header = with_tooltip('Junior Accountant','Junior Accountant')),\n            `HR Director` = colDef(header = with_tooltip('HR Director','HR Director')),\n            `Senior Accountant` = colDef(header = with_tooltip('Senior Accountant','Senior Accountant')),\n            `Assistanct of HR and DEIJ` = colDef(header = with_tooltip(\n              'Assistanct of HR and DEIJ','Assistanct of HR and DEIJ')),\n            `Assoc Director of Contracts and HR` = colDef(header = with_tooltip(\n              'Assoc Director of Contracts and HR','Assoc Director of Contracts and HR')),\n            `Director of Grants and Financal Analysis` = colDef(header = with_tooltip(\n                'Director of Grants and Financal Analysis','Director of Grants and Financal Analysis')),\n            `Director of Facilities and Technology` = colDef(header = with_tooltip(\n              'Director of Facilities and Technology','Director of Facilities and Technology')),\n            `CFO` = colDef(header = with_tooltip('CFO','CFO')),\n            `General Counsel` = colDef(header = with_tooltip('General Counsel','General Counsel'))\n            )\n          )"
  },
  {
    "objectID": "index.html#other-ideas",
    "href": "index.html#other-ideas",
    "title": "Workload Model",
    "section": "Other ideas",
    "text": "Other ideas\n\nA view that highlights unfulfilled hours or work items"
  },
  {
    "objectID": "index.html#questions-that-need-to-be-answered-in-report",
    "href": "index.html#questions-that-need-to-be-answered-in-report",
    "title": "Workload Model",
    "section": "Questions that need to be answered in report",
    "text": "Questions that need to be answered in report\n\nHow many people would it take to do 100% of the required work?\nHow do things change as the quality of work changes (increases or decreases)?"
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Workload Model",
    "section": "Introduction",
    "text": "Introduction\nThis report provides a summary view of data related to workers, tasks, and hours."
  },
  {
    "objectID": "index.html#next-steps",
    "href": "index.html#next-steps",
    "title": "Workload Model",
    "section": "Next Steps",
    "text": "Next Steps\n\n\n\n\n\n\nImportant\n\n\n\nGiven limitations on hours… where should I focus next?\nPriorities: 1. Hang on actual website 1. Make useful edits to heatmap\n+ add in grouped skill for each item + Add ability to switch between number or name or title 1. Incorporate narrative from Greg, Jerry, or Meghan? 1. What else?\n\n\nLonger term ideas: 1. Create PDF or Word output from report results 1. Create Shiny app version of this content 1. Create data collection tool"
  }
]