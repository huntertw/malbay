[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workload Model",
    "section": "",
    "text": "This report provides a summary view of data related to workers, tasks, and hours."
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "Workload Model",
    "section": "Setup",
    "text": "Setup\n\nEnvironment\n\n\nCode\nhere::i_am(\"final_report.qmd\")\nlibrary(here)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(reactable)\nlibrary(reactablefmtr)\n\ncfg <- config::get()\n\nggplot2::theme_set(theme_bw())\n\nmbcol <- \"#1D5F97\"\n\n# TODO\n# - add color pallette that aligns to malbay\n# - add a label to work items graph to show what each mark means\n# - figure out why rendering looks a little blurry\n# - 90 degree angle of header row on heatmap or some other solution\n# - Improve heatmap by\n    # - making text smaller?\n    # - Add tool tips with totals for columns and rows?\n    # - \n# - After I get feedback on each view, start adding in data validation checks\n# Can I adjust the scroll to scroll and not jump\n\n\n\n\n# Random info: if prompted for gf pat, use credentials::set_github_pat()\n\n\n\n\nReading in Data\nThe first data set is organized by item and role. It includes information about each of these combinations and a quick summary is provided below.\n\n\nCode\nmain_dat <- readr::read_csv(here(cfg$datapath, cfg$main), \n                            show_col_types = FALSE)\n\nglimpse(main_dat)\n\n\nRows: 70\nColumns: 6\n$ item      <chr> \"tour theater\", \"review budget\", \"payroll\", \"supervise custo…\n$ exp_hours <dbl> 2, 2, 2, 20, 10, 10, 10, 2, 1, 1, 1, 2, 2, 1, 30, 1, 1, 1, 2…\n$ period    <chr> \"week\", \"week\", \"week\", \"week\", \"week\", \"week\", \"week\", \"wee…\n$ role      <chr> \"manager\", \"manager\", \"manager\", \"manager\", \"manager\", \"mana…\n$ start_dt  <dbl> 20230101, 20230101, 20230101, 20230101, 20230101, 20230901, …\n$ end_dt    <dbl> 20251231, 20251231, 20251231, 20251231, 20230831, 20240430, …\n\n\nThe second data set organizes cases by work items. It is meant to represent the full list of work items and the expected number of hours that will be required to complete each. This data will be compared to the first data set throughout. An example of the output is printed below.\n\n\nCode\nworkitems_dat <- readr::read_csv(here(cfg$datapath, cfg$workitems),\n                                 show_col_types = FALSE)\n\nglimpse(workitems_dat)\n\n\nRows: 21\nColumns: 2\n$ item           <chr> \"backup customer trans\", \"backup projection\", \"build mo…\n$ hours_required <dbl> 4.0, 4.0, 1.5, 1.5, 54.0, 25.5, 6.0, 6.0, 2.0, 26.0, 2.…\n\n\nAlthough not included, there is probably at least one more data set.\n\nA list of workers and relevant information on each\n\nTODO: Create example list of workers"
  },
  {
    "objectID": "index.html#preparing-data",
    "href": "index.html#preparing-data",
    "title": "Workload Model",
    "section": "Preparing Data",
    "text": "Preparing Data\nThis section outlines some data validation checks and a series of adjustments that are made to the input data based on global parameters.\n\nValidating Data\nTODO: Work on this section as we confirm what the inputs will look like.\nOutput from confirming data (probably a table)\n\nNumber rows\nTotal hours\nTotal roles\nTotal tasks\nSum of planned hours should meet total number of fours after accounting for admin\nSum of planned hours for each ind should meet expected supply, highlight above or below\nAll individuals or roles should be included in the data set (placeholder inds can exist for planning)\nSum of planned hours within each period (week, month, year, etc.) should meet total number of hours after accounting for admin\nSum of planned hours for each individual or role within each period should meet total number of hours after accounting for administrative activities\nAll tasks should be included, even if there is no alignment. The latter should be highlighted.\nEach ind’s maximum and minimum dates should cover the full timeline. If they don’t, the fact should be highlighted.\n\nOther ideas?\n\n\nAdjusting Data\nThis section will outline any adjustments applied to the input data along with a summary of any global parameters.\nSome of the potential ideas for this section includes:\n\nOverall timeline\nStandard work day/week/year\nPercent of worker’s time that should be reserved for admin activities\nTotal hours available after accounting for admin activities through the timeline\nFull list of workers/roles included in exercise\nCurrent quality level vs. optimal quality level\n\nTODO: Provide example of an adjustable parameter based on discussion with team"
  },
  {
    "objectID": "index.html#views",
    "href": "index.html#views",
    "title": "Workload Model",
    "section": "Views",
    "text": "Views\n\nHours by work item\nThe first view provides the hours by work item.\n\n\nCode\n# prepare data\nhours_by_item <- main_dat %>% \n  group_by(item) %>% \n  summarize(hours = sum(exp_hours)) %>% \n  full_join(workitems_dat, by = join_by(item)) %>% \n  mutate(item = forcats::fct_infreq(item, w = hours_required)) %>% \n  tidyr::replace_na(list(hours = 0))\n\nxlab <- unique(main_dat$period)\nstopifnot(\"period must be on the same time frame\" = length(xlab) == 1)\n  \n  \n# Create graph\nhours_by_item %>% \n  ggplot(aes(y = forcats::fct_rev(item))) +\n  geom_col(aes(x = hours),\n           fill = mbcol) +\n  geom_point(aes(x = hours_required)) +\n  labs(title = \"Hours by work item\",\n       y = \"Work item\", \n       x = paste0(\"Hours per \", xlab))\n\n\n\n\n\nCode\npart1 <- hours_by_item %>% \n  mutate(over_under_pct = hours / hours_required-1) %>% \n  select(item, hours) %>% \n  ggplot(aes(y = forcats::fct_rev(item))) +\n  geom_col(aes(x = hours),\n           fill = mbcol) +\n  labs(title = \"Hours by work item\",\n     y = \"Work item\", \n     x = paste0(\"Hours per \", xlab))\n\n  \npart2 <- hours_by_item %>% \n  mutate(over_under_pct = hours / hours_required-1) %>% \n  select(item, over_under_pct) %>% \n  ggplot(aes(y = forcats::fct_rev(item))) +\n  geom_col(aes(x = over_under_pct),\n           fill = mbcol) +\n  scale_x_continuous(labels = scales::percent, limits = c(-1, 1),\n                     breaks = c(-.75, 0, .75)) +\n  labs(title = \"% over/under\",\n     y = NULL, \n     x = \"%\")+\n  theme(axis.text.y = element_blank())\n  \nlibrary(patchwork)\n\npart1 + part2 + plot_layout(widths = c(3, 1))\n\n\n\n\n\n\n\nHours by individual and work item\nThis section shows the expect time for each task grouped by individuals or roles.\n\n\nCode\n# prepare data\nhours_by_item_role <- main_dat %>%\n  group_by(item, role) %>%\n  summarize(hours = sum(exp_hours), .groups = \"drop\") %>%  \n  # full_join(workitems_dat) %>%\n  mutate(item = forcats::fct_infreq(item, w = hours)) #%>%\n  # tidyr::replace_na(list(hours = 0))\n\nxlab <- unique(main_dat$period)\nstopifnot(\"period must be on the same time frame\" = length(xlab) == 1)\n  \n  \n# Create graph\nhours_by_item_role %>% \n  ggplot() +\n  geom_col(aes(x = hours, y = forcats::fct_rev(item)), \n           position = \"dodge\", fill = mbcol) +\n  facet_wrap(.~role, scale = \"free_y\", nrow = 3) +\n  labs(title = \"Hours by work item\",\n       y = \"Work item\", \n       x = paste0(\"Hours per \", xlab))\n\n\n\n\n\n\n\nGantt Chart\nThis view provides the time expected on each task throughout the time period.\n\n\nCode\nmain_dat %>% \n  # filter(role == \"manager\") %>% \n  ggplot(aes(x=lubridate::ymd(start_dt), xend=lubridate::ymd(end_dt), y=item, yend=item)) +\n  # theme_bw()+ #use ggplot theme with black gridlines and white background\n  geom_segment(linewidth=3,\n               color = mbcol) + #increase line width of segments in the chart\n  facet_wrap(.~role, scales = \"free_y\") +\n  labs(title='Schedule', x='Time', y='Work Item')\n\n\n\n\n\n\n\nHeatmap\nFinally, this view highlights where time is being spent by the team and where there are potential gaps.\n\n\nCode\n# https://glin.github.io/reactable/articles/examples.html#basic-usage\n\n# TODO: \n# Test tippy tooltip\n# Add some data that takes into account higher level work tasks / skills\nhm_dat <- main_dat %>% \n  select(item, exp_hours, role) %>% \n  tidyr::pivot_wider(names_from = role, \n                     values_from = exp_hours) %>% \n  as.data.frame()\n \nlibrary(tippy)\nwith_tooltip <- function(value, tooltip, ...) {\n  htmltools::div(style = \"text-decoration: underline; text-decoration-style: dotted; cursor: help\",\n      tippy(value, tooltip, ...))\n}\n\n\nreactable(hm_dat, \n          resizable = TRUE,\n          pagination = FALSE,\n          bordered = TRUE,\n          wrap = FALSE,\n                    # width = 2000,\n          # style = list(maxWidth = 3000),\n          defaultColDef = colDef(footer = function(values) sum(values, na.rm = T),\n                                 footerStyle = list(fontWeight = \"bold\"),\n                                 minWidth = 100,\n                                 style = color_scales(hm_dat, \n                                                      colors = RColorBrewer::brewer.pal(5, \"Oranges\"))),\n          columns = list(\n            item = colDef(minWidth = 200, filterable = TRUE, \n                         sticky = \"left\", footer = \"Total\"),\n            # There must be a better way to do this...\n            # cat(paste0(\"`\", names(hm_dat), \n            #            \"` = colDef(header = with_tooltip('\",names(hm_dat),\n            #            \"','\",names(hm_dat),\"'))\"), \n            #     sep = \",\\n\")\n            `manager` = colDef(header = with_tooltip('manager','manager')),\n            `shift supervisor 1` = colDef(header = with_tooltip('shift supervisor 1','shift supervisor 1')),\n            `shift supervisor 2` = colDef(header = with_tooltip('shift supervisor 2','shift supervisor 2')),\n            `theater ops specialist sr 1` = colDef(header = with_tooltip('theater ops specialist sr 1','theater ops specialist sr 1')),\n            `theater ops specialist sr 2` = colDef(header = with_tooltip('theater ops specialist sr 2','theater ops specialist sr 2')),\n            `theater ops specialist sr 3` = colDef(header = with_tooltip('theater ops specialist sr 3','theater ops specialist sr 3')),\n            `theater ops specialist 1` = colDef(header = with_tooltip('theater ops specialist 1','theater ops specialist 1')),\n            `theater ops specialist 2` = colDef(header = with_tooltip('theater ops specialist 2','theater ops specialist 2')),\n            `theater ops specialist 3` = colDef(header = with_tooltip('theater ops specialist 3','theater ops specialist 3'))\n            )\n          )"
  },
  {
    "objectID": "index.html#other-ideas",
    "href": "index.html#other-ideas",
    "title": "Workload Model",
    "section": "Other ideas",
    "text": "Other ideas\n\nA view that highlights unfulfilled hours or work items"
  },
  {
    "objectID": "index.html#questions-that-need-to-be-answered-in-report",
    "href": "index.html#questions-that-need-to-be-answered-in-report",
    "title": "Workload Model",
    "section": "Questions that need to be answered in report",
    "text": "Questions that need to be answered in report\n\nHow many people would it take to do 100% of the required work?\nHow do things change as the quality of work changes (increases or decreases)?"
  }
]